enum CampaignState {
  COLLECTION
  LIVE
  REVIEW
  COMPLETE
  UNSUCCESSFUL
}

enum GoalType {
  FIXED
  FLEXIBLE
}

type Factory @entity {
  id: ID!
  campaignFactories: [CampaignFactory!]!
  totalCampaignFactories: BigInt!
}

type CampaignFactory @entity {
  "campaign factory address"
  id: ID!
  "factory this campaignFactory belongs to"
  origin: Factory!
  factoryWallet: Bytes!
  createdAt: BigInt!
  campaignImplementation: Bytes
  campaignRewardsImplementation: Bytes
  defaultCommission: BigInt
  factoryRevenue: BigInt
  totalRevenueFromCommissions: BigInt
  paused: Boolean!

  "campaign rules"
  deadlineStrikesAllowed: BigInt!
  minimumContributionAllowed: BigInt!
  maximumContributionAllowed: BigInt!
  minimumRequestAmountAllowed: BigInt!
  maximumRequestAmountAllowed: BigInt!
  minimumCampaignTarget: BigInt!
  maximumCampaignTarget: BigInt!
  maxDeadlineExtension: BigInt!
  minDeadlineExtension: BigInt!
  minRequestDuration: BigInt!
  maxRequestDuration: BigInt!
  reviewThresholdMark: BigInt!
  requestFinalizationThreshold: BigInt!
  reportThresholdMark: BigInt!

  # totalRevenueFromFeatures: BigInt
  "current owner of the factory"
  owner: ID!
  "derived fields"
  users: [User!] @derivedFrom(field: "campaignFactory")
  campaigns: [Campaign!] @derivedFrom(field: "campaignFactory")
  tokens: [Token!] @derivedFrom(field: "campaignFactory")
  categories: [Category!] @derivedFrom(field: "campaignFactory")
}

type Token @entity {
  id: ID!
  createdAt: BigInt!
  campaignFactory: CampaignFactory!
  approved: Boolean!
  campaigns: [Campaign!]! @derivedFrom(field: "token")
  exists: Boolean!
}

type User @entity {
  id: ID!
  campaignFactory: CampaignFactory!
  # campaignsDeployed: [Campaign!]! @derivedFrom(field: "owner")
  # campaignsBacked: [Campaign!]! @derivedFrom(field: "approvers")
  userAddress: Bytes!
  joined: BigInt!
  verified: Boolean!
  transferredFrom: Bytes
  transferredTo: Bytes
  totalWithdrawals: BigInt
  totalContributions: BigInt
  contributions: [Contribution!]! @derivedFrom(field: "owner")
  rewards: [RewardRecipient!]! @derivedFrom(field: "owner")
  votes: [Vote!]! @derivedFrom(field: "owner")
  requests: [Request!]! @derivedFrom(field: "owner")
  reports: [Report!]! @derivedFrom(field: "owner")
  reviews: [Review!]! @derivedFrom(field: "owner")
  exists: Boolean!
}

type Category @entity {
  id: ID!
  campaignFactory: CampaignFactory!
  campaigns: [Campaign!] @derivedFrom(field: "category")
  totalCampaign: BigInt!
  commission: BigInt!
  createdAt: BigInt!
  updatedAt: BigInt!
  active: Boolean!
  exists: Boolean!
}

type Campaign @entity {
  id: ID!
  campaignFactory: CampaignFactory!
  campaignAddress: Bytes!
  rewardsAddress: Bytes!
  owner: User!
  approvers: [User!]
  createdAt: BigInt!
  category: Category!
  active: Boolean!
  approved: Boolean!
  token: Token
  withdrawalsPaused: Boolean!
  allowContributionAfterTargetIsMet: Boolean
  minimumContribution: BigInt
  target: BigInt
  deadline: BigInt
  goalType: GoalType
  campaignState: CampaignState!

  totalCampaignContribution: BigInt
  campaignBalance: BigInt
  totalApprovers: BigInt
  totalFinalizedRequests: BigInt
  totalReports: BigInt
  totalReviews: BigInt

  "derived fields"
  requests: [Request!] @derivedFrom(field: "campaign")
  reports: [Report!] @derivedFrom(field: "campaign")
  reviews: [Review!] @derivedFrom(field: "campaign")
  contributions: [Contribution!] @derivedFrom(field: "campaign")
  rewards: [Reward!] @derivedFrom(field: "campaign")
  rewardRecipients: [RewardRecipient!] @derivedFrom(field: "campaign")
  exists: Boolean!
}

type Contribution @entity {
  id: ID!
  campaign: Campaign!
  owner: User!
  amount: BigInt!
  withReward: Boolean!
  reward: RewardRecipient!
  withdrawn: Boolean!
  createdAt: BigInt!
}

type Reward @entity {
  id: ID!
  createdAt: BigInt!
  amount: BigInt!
  campaign: Campaign!
  rewardRecipients: [RewardRecipient!]! @derivedFrom(field: "reward")
  exists: Boolean!
}

type RewardRecipient @entity {
  id: ID!
  campaign: Campaign!
  owner: User!
  createdAt: BigInt!
  updatedAt: BigInt!
  reward: Reward!
  deliveredByCampaign: Boolean!
  receivedByUser: Boolean!
}

type Request @entity {
  id: ID!
  createdAt: BigInt!
  updatedAt: BigInt!
  campaign: Campaign!
  recipient: Bytes!
  complete: Boolean!
  value: BigInt!
  totalApprovals: BigInt!
  totalAgainst: BigInt!
  totalAbstained: BigInt!
  duration: BigInt!
  void: Boolean!
  voidedBy: User
  votes: [Vote!]! @derivedFrom(field: "request")
  owner: User!
}

type Vote @entity {
  id: ID!
  campaign: Campaign!
  createdAt: BigInt!
  updatedAt: BigInt!
  request: Request!
  owner: User!
  support: BigInt!
  voted: Boolean!
}

type Review @entity {
  id: ID!
  createdAt: BigInt!
  owner: User!
  campaign: Campaign!
}

type Report @entity {
  id: ID!
  createdAt: BigInt!
  owner: User!
  campaign: Campaign!
}
