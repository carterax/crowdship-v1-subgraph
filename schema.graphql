enum CampaignState {
  COLLECTION
  LIVE
  REVIEW
  COMPLETE
  UNSUCCESSFUL
}

enum GoalType {
  FIXED
  FLEXIBLE
}

type Factory @entity {
  id: ID!
  campaignFactories: [CampaignFactory!]!
  totalCampaignFactories: BigInt!
}

type CampaignFactory @entity {
  "campaign factory address"
  id: ID!

  "factory this campaignFactory belongs to"
  origin: Factory!

  factoryWallet: Bytes!
  createdAt: BigInt!
  campaignImplementation: Bytes
  campaignRewardsImplementation: Bytes
  factoryRevenue: BigInt
  totalRevenueFromCommissions: BigInt
  paused: Boolean!

  "campaign rules"
  defaultCommission: BigInt!
  deadlineStrikesAllowed: BigInt!
  minimumContributionAllowed: BigInt!
  maximumContributionAllowed: BigInt!
  minimumRequestAmountAllowed: BigInt!
  maximumRequestAmountAllowed: BigInt!
  minimumCampaignTarget: BigInt!
  maximumCampaignTarget: BigInt!
  maxDeadlineExtension: BigInt!
  minDeadlineExtension: BigInt!
  minRequestDuration: BigInt!
  maxRequestDuration: BigInt!
  reviewThresholdMark: BigInt!
  requestFinalizationThreshold: BigInt!
  reportThresholdMark: BigInt!

  "aggregates"
  campaignCount: BigInt!
  categoriesCount: BigInt!
  userCount: BigInt!
  tokenCount: BigInt!

  # totalRevenueFromFeatures: BigInt
  "current owner of the factory"
  owner: User!

  "derived fields"
  users: [User!]! @derivedFrom(field: "campaignFactory")
  campaigns: [Campaign!]! @derivedFrom(field: "campaignFactory")
  tokens: [Token!]! @derivedFrom(field: "campaignFactory")
  categories: [Category!]! @derivedFrom(field: "campaignFactory")
}

type Token @entity {
  id: ID!
  createdAt: BigInt!
  campaignFactory: CampaignFactory!
  approved: Boolean!
}

type User @entity {
  id: ID!
  campaignFactory: CampaignFactory!
  userAddress: Bytes!
  joined: BigInt!
  verified: Boolean!
  transferredFrom: Bytes
  transferredTo: Bytes
  totalWithdrawals: BigInt!
  totalContributions: BigInt!
  contributionCount: BigInt!
  rewardCount: BigInt!

  "derived fields"
  contributions: [Contribution!]! @derivedFrom(field: "owner")
  rewards: [RewardRecipient!]! @derivedFrom(field: "owner")
  votes: [Vote!]! @derivedFrom(field: "owner")
  requests: [Request!]! @derivedFrom(field: "owner")
  reports: [Report!]! @derivedFrom(field: "owner")
  reviews: [Review!]! @derivedFrom(field: "owner")
}

type Category @entity {
  id: ID!
  campaignFactory: CampaignFactory!
  campaigns: [Campaign!]! @derivedFrom(field: "category")
  totalCampaign: BigInt!
  commission: BigInt!
  createdAt: BigInt!
  updatedAt: BigInt!
  active: Boolean!
}

type Campaign @entity {
  id: ID!
  campaignFactory: CampaignFactory!
  owner: User!
  createdAt: BigInt!
  category: Category!
  active: Boolean!
  approved: Boolean!
  token: Token
  withdrawalsPaused: Boolean!
  allowContributionAfterTargetIsMet: Boolean
  minimumContribution: BigInt
  target: BigInt
  deadline: BigInt!
  goalType: GoalType
  campaignState: CampaignState!
  totalCampaignContribution: BigInt!
  campaignBalance: BigInt!
  deadlineExtensionThreshold: BigInt!
  deadlineExtensionThresholdCount: BigInt!

  "aggregates"
  approversCount: BigInt!
  reportCount: BigInt!
  reviewCount: BigInt!

  "aux contracts"
  rewardFactory: RewardFactory!
  requestFactory: RequestFactory!
  voteFactory: VoteFactory!

  "derived fields"
  contributions: [Contribution!]! @derivedFrom(field: "campaign")
  reports: [Report!]! @derivedFrom(field: "campaign")
  reviews: [Review!]! @derivedFrom(field: "campaign")
}

type RewardFactory @entity {
  id: ID!
  campaign: Campaign!
  createdAt: BigInt!
  rewardCount: BigInt!
  rewards: [Reward!]! @derivedFrom(field: "rewardFactory")
}

type RequestFactory @entity {
  id: ID!
  campaign: Campaign!
  createdAt: BigInt!
  requestCount: BigInt!
  finalizedRequestCount: BigInt!
  requests: [Request!]! @derivedFrom(field: "requestFactory")
}

type VoteFactory @entity {
  id: ID!
  campaign: Campaign!
  createdAt: BigInt!
  votes: [Vote!]! @derivedFrom(field: "voteFactory")
}

type Contribution @entity {
  id: ID!
  campaign: Campaign!
  owner: User!
  amount: BigInt!
  withReward: Boolean!
  reward: RewardRecipient!
  withdrawn: Boolean!
  createdAt: BigInt!
}

type Reward @entity {
  id: ID!
  createdAt: BigInt!
  amount: BigInt!
  stock: BigInt!
  deliveryDate: BigInt!
  active: Boolean!
  rewardFactory: RewardFactory!
  rewardRecipients: [RewardRecipient!]! @derivedFrom(field: "reward")
  exists: Boolean!
}

type RewardRecipient @entity {
  id: ID!
  owner: User!
  createdAt: BigInt!
  updatedAt: BigInt!
  reward: Reward!
  deliveredByCampaign: Boolean!
  receivedByUser: Boolean!
}

type Request @entity {
  id: ID!
  createdAt: BigInt!
  updatedAt: BigInt!
  requestFactory: RequestFactory!
  recipient: Bytes!
  complete: Boolean!
  value: BigInt!
  approvalCount: BigInt!
  againstCount: BigInt!
  abstainedCount: BigInt!
  duration: BigInt!
  void: Boolean!
  voidedBy: User
  votes: [Vote!]! @derivedFrom(field: "request")
  owner: User!
}

type Vote @entity {
  id: ID!
  voteFactory: VoteFactory!
  createdAt: BigInt!
  updatedAt: BigInt!
  request: Request!
  owner: User!
  support: BigInt!
  voted: Boolean!
}

type Review @entity {
  id: ID!
  createdAt: BigInt!
  owner: User!
  campaign: Campaign!
}

type Report @entity {
  id: ID!
  createdAt: BigInt!
  owner: User!
  campaign: Campaign!
}
