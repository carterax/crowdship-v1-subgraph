// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Factory extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("factoryWallet", Value.fromBytes(Bytes.empty()));
    this.set("campaignImplementation", Value.fromBytes(Bytes.empty()));
    this.set("campaignRewardsImplementation", Value.fromBytes(Bytes.empty()));
    this.set("factoryRevenue", Value.fromBigInt(BigInt.zero()));
    this.set("totalRevenueFromCommissions", Value.fromBigInt(BigInt.zero()));
    this.set("totalRevenueFromFeatures", Value.fromBigInt(BigInt.zero()));
    this.set("owner", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Factory entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Factory entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Factory", id.toString(), this);
    }
  }

  static load(id: string): Factory | null {
    return changetype<Factory | null>(store.get("Factory", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get campaigns(): Array<string> {
    let value = this.get("campaigns");
    return value!.toStringArray();
  }

  set campaigns(value: Array<string>) {
    this.set("campaigns", Value.fromStringArray(value));
  }

  get factoryWallet(): Bytes {
    let value = this.get("factoryWallet");
    return value!.toBytes();
  }

  set factoryWallet(value: Bytes) {
    this.set("factoryWallet", Value.fromBytes(value));
  }

  get campaignImplementation(): Bytes {
    let value = this.get("campaignImplementation");
    return value!.toBytes();
  }

  set campaignImplementation(value: Bytes) {
    this.set("campaignImplementation", Value.fromBytes(value));
  }

  get campaignRewardsImplementation(): Bytes {
    let value = this.get("campaignRewardsImplementation");
    return value!.toBytes();
  }

  set campaignRewardsImplementation(value: Bytes) {
    this.set("campaignRewardsImplementation", Value.fromBytes(value));
  }

  get factoryRevenue(): BigInt {
    let value = this.get("factoryRevenue");
    return value!.toBigInt();
  }

  set factoryRevenue(value: BigInt) {
    this.set("factoryRevenue", Value.fromBigInt(value));
  }

  get totalRevenueFromCommissions(): BigInt {
    let value = this.get("totalRevenueFromCommissions");
    return value!.toBigInt();
  }

  set totalRevenueFromCommissions(value: BigInt) {
    this.set("totalRevenueFromCommissions", Value.fromBigInt(value));
  }

  get totalRevenueFromFeatures(): BigInt {
    let value = this.get("totalRevenueFromFeatures");
    return value!.toBigInt();
  }

  set totalRevenueFromFeatures(value: BigInt) {
    this.set("totalRevenueFromFeatures", Value.fromBigInt(value));
  }

  get owner(): string {
    let value = this.get("owner");
    return value!.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }
}

export class Token extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("approved", Value.fromBoolean(false));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Token entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Token entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Token", id.toString(), this);
    }
  }

  static load(id: string): Token | null {
    return changetype<Token | null>(store.get("Token", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get approved(): boolean {
    let value = this.get("approved");
    return value!.toBoolean();
  }

  set approved(value: boolean) {
    this.set("approved", Value.fromBoolean(value));
  }

  get campaigns(): Array<string> {
    let value = this.get("campaigns");
    return value!.toStringArray();
  }

  set campaigns(value: Array<string>) {
    this.set("campaigns", Value.fromStringArray(value));
  }
}

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("userAddress", Value.fromBytes(Bytes.empty()));
    this.set("joined", Value.fromBigInt(BigInt.zero()));
    this.set("updatedAt", Value.fromBigInt(BigInt.zero()));
    this.set("verified", Value.fromBoolean(false));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save User entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save User entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("User", id.toString(), this);
    }
  }

  static load(id: string): User | null {
    return changetype<User | null>(store.get("User", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get campaignsDeployed(): Array<string> {
    let value = this.get("campaignsDeployed");
    return value!.toStringArray();
  }

  set campaignsDeployed(value: Array<string>) {
    this.set("campaignsDeployed", Value.fromStringArray(value));
  }

  get campaignsBacked(): Array<string> {
    let value = this.get("campaignsBacked");
    return value!.toStringArray();
  }

  set campaignsBacked(value: Array<string>) {
    this.set("campaignsBacked", Value.fromStringArray(value));
  }

  get userAddress(): Bytes {
    let value = this.get("userAddress");
    return value!.toBytes();
  }

  set userAddress(value: Bytes) {
    this.set("userAddress", Value.fromBytes(value));
  }

  get joined(): BigInt {
    let value = this.get("joined");
    return value!.toBigInt();
  }

  set joined(value: BigInt) {
    this.set("joined", Value.fromBigInt(value));
  }

  get updatedAt(): BigInt {
    let value = this.get("updatedAt");
    return value!.toBigInt();
  }

  set updatedAt(value: BigInt) {
    this.set("updatedAt", Value.fromBigInt(value));
  }

  get verified(): boolean {
    let value = this.get("verified");
    return value!.toBoolean();
  }

  set verified(value: boolean) {
    this.set("verified", Value.fromBoolean(value));
  }

  get contributions(): Array<string> {
    let value = this.get("contributions");
    return value!.toStringArray();
  }

  set contributions(value: Array<string>) {
    this.set("contributions", Value.fromStringArray(value));
  }

  get rewards(): Array<string> {
    let value = this.get("rewards");
    return value!.toStringArray();
  }

  set rewards(value: Array<string>) {
    this.set("rewards", Value.fromStringArray(value));
  }

  get votes(): Array<string> {
    let value = this.get("votes");
    return value!.toStringArray();
  }

  set votes(value: Array<string>) {
    this.set("votes", Value.fromStringArray(value));
  }

  get requests(): Array<string> {
    let value = this.get("requests");
    return value!.toStringArray();
  }

  set requests(value: Array<string>) {
    this.set("requests", Value.fromStringArray(value));
  }

  get reports(): Array<string> {
    let value = this.get("reports");
    return value!.toStringArray();
  }

  set reports(value: Array<string>) {
    this.set("reports", Value.fromStringArray(value));
  }

  get reviews(): Array<string> {
    let value = this.get("reviews");
    return value!.toStringArray();
  }

  set reviews(value: Array<string>) {
    this.set("reviews", Value.fromStringArray(value));
  }
}

export class Category extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("totalCampaign", Value.fromBigInt(BigInt.zero()));
    this.set("commission", Value.fromBigInt(BigInt.zero()));
    this.set("createdAt", Value.fromBigInt(BigInt.zero()));
    this.set("updatedAt", Value.fromBigInt(BigInt.zero()));
    this.set("active", Value.fromBoolean(false));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Category entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Category entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Category", id.toString(), this);
    }
  }

  static load(id: string): Category | null {
    return changetype<Category | null>(store.get("Category", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get campaigns(): Array<string> {
    let value = this.get("campaigns");
    return value!.toStringArray();
  }

  set campaigns(value: Array<string>) {
    this.set("campaigns", Value.fromStringArray(value));
  }

  get totalCampaign(): BigInt {
    let value = this.get("totalCampaign");
    return value!.toBigInt();
  }

  set totalCampaign(value: BigInt) {
    this.set("totalCampaign", Value.fromBigInt(value));
  }

  get commission(): BigInt {
    let value = this.get("commission");
    return value!.toBigInt();
  }

  set commission(value: BigInt) {
    this.set("commission", Value.fromBigInt(value));
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    return value!.toBigInt();
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }

  get updatedAt(): BigInt {
    let value = this.get("updatedAt");
    return value!.toBigInt();
  }

  set updatedAt(value: BigInt) {
    this.set("updatedAt", Value.fromBigInt(value));
  }

  get active(): boolean {
    let value = this.get("active");
    return value!.toBoolean();
  }

  set active(value: boolean) {
    this.set("active", Value.fromBoolean(value));
  }
}

export class FeaturePackage extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("createdAt", Value.fromBigInt(BigInt.zero()));
    this.set("updatedAt", Value.fromBigInt(BigInt.zero()));
    this.set("time", Value.fromBigInt(BigInt.zero()));
    this.set("cost", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save FeaturePackage entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save FeaturePackage entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("FeaturePackage", id.toString(), this);
    }
  }

  static load(id: string): FeaturePackage | null {
    return changetype<FeaturePackage | null>(store.get("FeaturePackage", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    return value!.toBigInt();
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }

  get updatedAt(): BigInt {
    let value = this.get("updatedAt");
    return value!.toBigInt();
  }

  set updatedAt(value: BigInt) {
    this.set("updatedAt", Value.fromBigInt(value));
  }

  get time(): BigInt {
    let value = this.get("time");
    return value!.toBigInt();
  }

  set time(value: BigInt) {
    this.set("time", Value.fromBigInt(value));
  }

  get cost(): BigInt {
    let value = this.get("cost");
    return value!.toBigInt();
  }

  set cost(value: BigInt) {
    this.set("cost", Value.fromBigInt(value));
  }

  get campaigns(): Array<string> {
    let value = this.get("campaigns");
    return value!.toStringArray();
  }

  set campaigns(value: Array<string>) {
    this.set("campaigns", Value.fromStringArray(value));
  }
}

export class Campaign extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("factory", Value.fromString(""));
    this.set("campaignAddress", Value.fromBytes(Bytes.empty()));
    this.set("rewardsAddress", Value.fromBytes(Bytes.empty()));
    this.set("owner", Value.fromString(""));
    this.set("approvers", Value.fromStringArray(new Array(0)));
    this.set("createdAt", Value.fromBigInt(BigInt.zero()));
    this.set("updatedAt", Value.fromBigInt(BigInt.zero()));
    this.set("category", Value.fromString(""));
    this.set("featureFor", Value.fromBigInt(BigInt.zero()));
    this.set("active", Value.fromBoolean(false));
    this.set("approved", Value.fromBoolean(false));
    this.set("token", Value.fromString(""));
    this.set("withdrawalsPaused", Value.fromBoolean(false));
    this.set("allowContributionAfterTargetIsMet", Value.fromBoolean(false));
    this.set("totalCampaignContribution", Value.fromBigInt(BigInt.zero()));
    this.set("campaignBalance", Value.fromBigInt(BigInt.zero()));
    this.set("minimumContribution", Value.fromBigInt(BigInt.zero()));
    this.set("totalApprovers", Value.fromBigInt(BigInt.zero()));
    this.set("target", Value.fromBigInt(BigInt.zero()));
    this.set("deadline", Value.fromBigInt(BigInt.zero()));
    this.set("totalFinalizedRequests", Value.fromBigInt(BigInt.zero()));
    this.set("totalReports", Value.fromBigInt(BigInt.zero()));
    this.set("totalReviews", Value.fromBigInt(BigInt.zero()));
    this.set("goalType", Value.fromString(""));
    this.set("campaignState", Value.fromString(""));
    this.set("featurePackages", Value.fromStringArray(new Array(0)));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Campaign entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Campaign entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Campaign", id.toString(), this);
    }
  }

  static load(id: string): Campaign | null {
    return changetype<Campaign | null>(store.get("Campaign", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get factory(): string {
    let value = this.get("factory");
    return value!.toString();
  }

  set factory(value: string) {
    this.set("factory", Value.fromString(value));
  }

  get campaignAddress(): Bytes {
    let value = this.get("campaignAddress");
    return value!.toBytes();
  }

  set campaignAddress(value: Bytes) {
    this.set("campaignAddress", Value.fromBytes(value));
  }

  get rewardsAddress(): Bytes {
    let value = this.get("rewardsAddress");
    return value!.toBytes();
  }

  set rewardsAddress(value: Bytes) {
    this.set("rewardsAddress", Value.fromBytes(value));
  }

  get owner(): string {
    let value = this.get("owner");
    return value!.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get approvers(): Array<string> {
    let value = this.get("approvers");
    return value!.toStringArray();
  }

  set approvers(value: Array<string>) {
    this.set("approvers", Value.fromStringArray(value));
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    return value!.toBigInt();
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }

  get updatedAt(): BigInt {
    let value = this.get("updatedAt");
    return value!.toBigInt();
  }

  set updatedAt(value: BigInt) {
    this.set("updatedAt", Value.fromBigInt(value));
  }

  get category(): string {
    let value = this.get("category");
    return value!.toString();
  }

  set category(value: string) {
    this.set("category", Value.fromString(value));
  }

  get featureFor(): BigInt {
    let value = this.get("featureFor");
    return value!.toBigInt();
  }

  set featureFor(value: BigInt) {
    this.set("featureFor", Value.fromBigInt(value));
  }

  get active(): boolean {
    let value = this.get("active");
    return value!.toBoolean();
  }

  set active(value: boolean) {
    this.set("active", Value.fromBoolean(value));
  }

  get approved(): boolean {
    let value = this.get("approved");
    return value!.toBoolean();
  }

  set approved(value: boolean) {
    this.set("approved", Value.fromBoolean(value));
  }

  get token(): string {
    let value = this.get("token");
    return value!.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get withdrawalsPaused(): boolean {
    let value = this.get("withdrawalsPaused");
    return value!.toBoolean();
  }

  set withdrawalsPaused(value: boolean) {
    this.set("withdrawalsPaused", Value.fromBoolean(value));
  }

  get allowContributionAfterTargetIsMet(): boolean {
    let value = this.get("allowContributionAfterTargetIsMet");
    return value!.toBoolean();
  }

  set allowContributionAfterTargetIsMet(value: boolean) {
    this.set("allowContributionAfterTargetIsMet", Value.fromBoolean(value));
  }

  get totalCampaignContribution(): BigInt {
    let value = this.get("totalCampaignContribution");
    return value!.toBigInt();
  }

  set totalCampaignContribution(value: BigInt) {
    this.set("totalCampaignContribution", Value.fromBigInt(value));
  }

  get campaignBalance(): BigInt {
    let value = this.get("campaignBalance");
    return value!.toBigInt();
  }

  set campaignBalance(value: BigInt) {
    this.set("campaignBalance", Value.fromBigInt(value));
  }

  get minimumContribution(): BigInt {
    let value = this.get("minimumContribution");
    return value!.toBigInt();
  }

  set minimumContribution(value: BigInt) {
    this.set("minimumContribution", Value.fromBigInt(value));
  }

  get totalApprovers(): BigInt {
    let value = this.get("totalApprovers");
    return value!.toBigInt();
  }

  set totalApprovers(value: BigInt) {
    this.set("totalApprovers", Value.fromBigInt(value));
  }

  get target(): BigInt {
    let value = this.get("target");
    return value!.toBigInt();
  }

  set target(value: BigInt) {
    this.set("target", Value.fromBigInt(value));
  }

  get deadline(): BigInt {
    let value = this.get("deadline");
    return value!.toBigInt();
  }

  set deadline(value: BigInt) {
    this.set("deadline", Value.fromBigInt(value));
  }

  get totalFinalizedRequests(): BigInt {
    let value = this.get("totalFinalizedRequests");
    return value!.toBigInt();
  }

  set totalFinalizedRequests(value: BigInt) {
    this.set("totalFinalizedRequests", Value.fromBigInt(value));
  }

  get totalReports(): BigInt {
    let value = this.get("totalReports");
    return value!.toBigInt();
  }

  set totalReports(value: BigInt) {
    this.set("totalReports", Value.fromBigInt(value));
  }

  get totalReviews(): BigInt {
    let value = this.get("totalReviews");
    return value!.toBigInt();
  }

  set totalReviews(value: BigInt) {
    this.set("totalReviews", Value.fromBigInt(value));
  }

  get goalType(): string {
    let value = this.get("goalType");
    return value!.toString();
  }

  set goalType(value: string) {
    this.set("goalType", Value.fromString(value));
  }

  get campaignState(): string {
    let value = this.get("campaignState");
    return value!.toString();
  }

  set campaignState(value: string) {
    this.set("campaignState", Value.fromString(value));
  }

  get requests(): Array<string> {
    let value = this.get("requests");
    return value!.toStringArray();
  }

  set requests(value: Array<string>) {
    this.set("requests", Value.fromStringArray(value));
  }

  get featurePackages(): Array<string> {
    let value = this.get("featurePackages");
    return value!.toStringArray();
  }

  set featurePackages(value: Array<string>) {
    this.set("featurePackages", Value.fromStringArray(value));
  }

  get reports(): Array<string> {
    let value = this.get("reports");
    return value!.toStringArray();
  }

  set reports(value: Array<string>) {
    this.set("reports", Value.fromStringArray(value));
  }

  get reviews(): Array<string> {
    let value = this.get("reviews");
    return value!.toStringArray();
  }

  set reviews(value: Array<string>) {
    this.set("reviews", Value.fromStringArray(value));
  }

  get contributions(): Array<string> {
    let value = this.get("contributions");
    return value!.toStringArray();
  }

  set contributions(value: Array<string>) {
    this.set("contributions", Value.fromStringArray(value));
  }

  get rewards(): Array<string> {
    let value = this.get("rewards");
    return value!.toStringArray();
  }

  set rewards(value: Array<string>) {
    this.set("rewards", Value.fromStringArray(value));
  }
}

export class Contribution extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("campaign", Value.fromString(""));
    this.set("owner", Value.fromString(""));
    this.set("amount", Value.fromBigInt(BigInt.zero()));
    this.set("withReward", Value.fromBoolean(false));
    this.set("reward", Value.fromString(""));
    this.set("createdAt", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Contribution entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Contribution entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Contribution", id.toString(), this);
    }
  }

  static load(id: string): Contribution | null {
    return changetype<Contribution | null>(store.get("Contribution", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get campaign(): string {
    let value = this.get("campaign");
    return value!.toString();
  }

  set campaign(value: string) {
    this.set("campaign", Value.fromString(value));
  }

  get owner(): string {
    let value = this.get("owner");
    return value!.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get withReward(): boolean {
    let value = this.get("withReward");
    return value!.toBoolean();
  }

  set withReward(value: boolean) {
    this.set("withReward", Value.fromBoolean(value));
  }

  get reward(): string {
    let value = this.get("reward");
    return value!.toString();
  }

  set reward(value: string) {
    this.set("reward", Value.fromString(value));
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    return value!.toBigInt();
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }
}

export class Reward extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("amount", Value.fromBigInt(BigInt.zero()));
    this.set("campaign", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Reward entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Reward entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Reward", id.toString(), this);
    }
  }

  static load(id: string): Reward | null {
    return changetype<Reward | null>(store.get("Reward", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get campaign(): string {
    let value = this.get("campaign");
    return value!.toString();
  }

  set campaign(value: string) {
    this.set("campaign", Value.fromString(value));
  }

  get eligibleRewards(): Array<string> {
    let value = this.get("eligibleRewards");
    return value!.toStringArray();
  }

  set eligibleRewards(value: Array<string>) {
    this.set("eligibleRewards", Value.fromStringArray(value));
  }
}

export class RewardEligibility extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("owner", Value.fromString(""));
    this.set("reward", Value.fromString(""));
    this.set("deliveredByCampaign", Value.fromBoolean(false));
    this.set("receivedByUser", Value.fromBoolean(false));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save RewardEligibility entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save RewardEligibility entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("RewardEligibility", id.toString(), this);
    }
  }

  static load(id: string): RewardEligibility | null {
    return changetype<RewardEligibility | null>(
      store.get("RewardEligibility", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): string {
    let value = this.get("owner");
    return value!.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get reward(): string {
    let value = this.get("reward");
    return value!.toString();
  }

  set reward(value: string) {
    this.set("reward", Value.fromString(value));
  }

  get deliveredByCampaign(): boolean {
    let value = this.get("deliveredByCampaign");
    return value!.toBoolean();
  }

  set deliveredByCampaign(value: boolean) {
    this.set("deliveredByCampaign", Value.fromBoolean(value));
  }

  get receivedByUser(): boolean {
    let value = this.get("receivedByUser");
    return value!.toBoolean();
  }

  set receivedByUser(value: boolean) {
    this.set("receivedByUser", Value.fromBoolean(value));
  }
}

export class Request extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("campaign", Value.fromString(""));
    this.set("recipient", Value.fromBytes(Bytes.empty()));
    this.set("complete", Value.fromBoolean(false));
    this.set("value", Value.fromBigInt(BigInt.zero()));
    this.set("totalApprovals", Value.fromBigInt(BigInt.zero()));
    this.set("totalAgainst", Value.fromBigInt(BigInt.zero()));
    this.set("totalAbstained", Value.fromBigInt(BigInt.zero()));
    this.set("duration", Value.fromBigInt(BigInt.zero()));
    this.set("void", Value.fromBoolean(false));
    this.set("owner", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Request entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Request entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Request", id.toString(), this);
    }
  }

  static load(id: string): Request | null {
    return changetype<Request | null>(store.get("Request", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get campaign(): string {
    let value = this.get("campaign");
    return value!.toString();
  }

  set campaign(value: string) {
    this.set("campaign", Value.fromString(value));
  }

  get recipient(): Bytes {
    let value = this.get("recipient");
    return value!.toBytes();
  }

  set recipient(value: Bytes) {
    this.set("recipient", Value.fromBytes(value));
  }

  get complete(): boolean {
    let value = this.get("complete");
    return value!.toBoolean();
  }

  set complete(value: boolean) {
    this.set("complete", Value.fromBoolean(value));
  }

  get value(): BigInt {
    let value = this.get("value");
    return value!.toBigInt();
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }

  get totalApprovals(): BigInt {
    let value = this.get("totalApprovals");
    return value!.toBigInt();
  }

  set totalApprovals(value: BigInt) {
    this.set("totalApprovals", Value.fromBigInt(value));
  }

  get totalAgainst(): BigInt {
    let value = this.get("totalAgainst");
    return value!.toBigInt();
  }

  set totalAgainst(value: BigInt) {
    this.set("totalAgainst", Value.fromBigInt(value));
  }

  get totalAbstained(): BigInt {
    let value = this.get("totalAbstained");
    return value!.toBigInt();
  }

  set totalAbstained(value: BigInt) {
    this.set("totalAbstained", Value.fromBigInt(value));
  }

  get duration(): BigInt {
    let value = this.get("duration");
    return value!.toBigInt();
  }

  set duration(value: BigInt) {
    this.set("duration", Value.fromBigInt(value));
  }

  get void(): boolean {
    let value = this.get("void");
    return value!.toBoolean();
  }

  set void(value: boolean) {
    this.set("void", Value.fromBoolean(value));
  }

  get votes(): Array<string> {
    let value = this.get("votes");
    return value!.toStringArray();
  }

  set votes(value: Array<string>) {
    this.set("votes", Value.fromStringArray(value));
  }

  get owner(): string {
    let value = this.get("owner");
    return value!.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }
}

export class Vote extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("request", Value.fromString(""));
    this.set("owner", Value.fromString(""));
    this.set("support", Value.fromBigInt(BigInt.zero()));
    this.set("cancelled", Value.fromBoolean(false));
    this.set("reasonHash", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Vote entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Vote entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Vote", id.toString(), this);
    }
  }

  static load(id: string): Vote | null {
    return changetype<Vote | null>(store.get("Vote", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get request(): string {
    let value = this.get("request");
    return value!.toString();
  }

  set request(value: string) {
    this.set("request", Value.fromString(value));
  }

  get owner(): string {
    let value = this.get("owner");
    return value!.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get support(): BigInt {
    let value = this.get("support");
    return value!.toBigInt();
  }

  set support(value: BigInt) {
    this.set("support", Value.fromBigInt(value));
  }

  get cancelled(): boolean {
    let value = this.get("cancelled");
    return value!.toBoolean();
  }

  set cancelled(value: boolean) {
    this.set("cancelled", Value.fromBoolean(value));
  }

  get reasonHash(): string {
    let value = this.get("reasonHash");
    return value!.toString();
  }

  set reasonHash(value: string) {
    this.set("reasonHash", Value.fromString(value));
  }
}

export class Review extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("owner", Value.fromString(""));
    this.set("campaign", Value.fromString(""));
    this.set("commentHash", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Review entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Review entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Review", id.toString(), this);
    }
  }

  static load(id: string): Review | null {
    return changetype<Review | null>(store.get("Review", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): string {
    let value = this.get("owner");
    return value!.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get campaign(): string {
    let value = this.get("campaign");
    return value!.toString();
  }

  set campaign(value: string) {
    this.set("campaign", Value.fromString(value));
  }

  get commentHash(): string {
    let value = this.get("commentHash");
    return value!.toString();
  }

  set commentHash(value: string) {
    this.set("commentHash", Value.fromString(value));
  }
}

export class Report extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("owner", Value.fromString(""));
    this.set("campaign", Value.fromString(""));
    this.set("reasonHash", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Report entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Report entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Report", id.toString(), this);
    }
  }

  static load(id: string): Report | null {
    return changetype<Report | null>(store.get("Report", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): string {
    let value = this.get("owner");
    return value!.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get campaign(): string {
    let value = this.get("campaign");
    return value!.toString();
  }

  set campaign(value: string) {
    this.set("campaign", Value.fromString(value));
  }

  get reasonHash(): string {
    let value = this.get("reasonHash");
    return value!.toString();
  }

  set reasonHash(value: string) {
    this.set("reasonHash", Value.fromString(value));
  }
}
